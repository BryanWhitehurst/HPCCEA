import argparse
import mysql-python
import setP

# Connects to the genders database. 
def connectDatabase(password):
    #block tests if gender database exists already
    try:
	config = {
	  'user': 'root'
	  'password': '%s'
# Command in main to write to file with password  


        mydb = mysql.connector.connect( host="localhost",user="root",password="Puffyf15", database="gender")
        if mydb.is_connected():
            cursor = mydb.cursor(buffered=True,dictionary=True)
    #if it does not exists runs create.sql script
    except Error as e:
        print(e)
        mydb = mysql.connector.connect( host="localhost", user="root", password="Puffyf15" )
        cursor = mydb.cursor(buffered=True , dictionary=True)
                # Open and read the file as a single buffer
        fd = open('createALL.sql', 'r')
        sqlFile = fd.read()
        fd.close()

        sqlCommands = sqlFile.split(';')
                # Execute every command from the input file
        for command in sqlCommands:
                # This will skip and report errors
            try:
                cursor.execute(command)
            except Error as e:
		print ("Command skipped: ", e)
    return mydb

def findNodes(mydb,gender_namei):
	sql = "SELECT DISTINCT n.node_name FROM NODE n JOIN CONFIGURATION c WHERE (n.node_name = c.node_name AND c.gender_name = %s )"
	val = (gender_namei,)
	cur = mydb.cursor(buffered=True, dictionary=True)
	cur.execute(sql,val)
	records = cur.fetchall()
   
	return records


def main():
	# Find a way to enable passwordless OR store the password after the first command for a certain period of time 
	parser = argparse.ArgumentParser(description='Connect with database')
	parser.add_argument('password', type=str)
	
	parser.add_argument('-dd',help='drops entire database',action='store_true',dest='dd')

	parser.add_argument('-q', nargs='*',help='prints list of nodes having the specified attribute in host range',action='store', dest='hostlist')

	parser.add_argument('-Q',nargs='*',help='returns 0 if attribute exists in nide else 1, if no node specified checks entire database',action='store')

	parser.add_argument('-c',nargs='*',help='prints list of nodes having specified attribute in comma seperated format',action='store',dest='comma')
	results = parser.parse_args()
    
	parser.add_argument('-n',nargs=1,help='prints list of nodes having specified attribute in newline separated list',action='store',dest='newline')
    
	parser.add_argument('-s',nargs=1,help='prints list of nodes having specified attribute in space separated list',action='store',dest='space')
    
	parser.add_argument('-v',nargs=1,help='outputs values associated with gender on a particular node',action='store')
    
	parser.add_argument('-vv',nargs=1,help='outputs values associated with gender and with node listed',action='store',dest='valuesWnodes')
    
	parser.add_argument('-l',nargs='*',help='list of attributes for a particular node, if no node all attributes in database')
    
	parser.add_argument('-V',nargs='*', help='outputs all values associated with gender, if U is specified only unqiue values')
    
	parser.add_argument('-U',help='V will only output unique values')
    
	parser.add_argument('-X',nargs='*',help='exlcude node from query')
    

	args = parser.parse_args()
	

	if args.password != None:
            setP.store()  
        #finds nodes w specified gender in hostlist format
	if results.hostlist != None:
		finLi = []
		records = []
		prev = False
		hosts = ''
		clusterN = ""
		elif results.X != None:
		record = findNodes(mydb,str(results.hostlist[0]))               		for row in record:
			if row['node_name'] != results.X[0]:
				records.append(row)
                                                                                			else:
				records = findNodes(mydb,str(results.hostlist[0]))
		if (len(records)) > 0:
			cluster0 = records[0]
			cluster0 = cluster0['node_name']
			cluster0 = cluster0[:-1]
			for row in records:                                     				clusterT = row['node_name']
				clusterT = clusterT[:-1]                                                        if cluster0 == clusterT:
					hosts += ( row['node_name'] + ',')
					prev = True
				elif cluster0 != clusterT and prev == True:
					finLi.append(hosts)
					hosts = ''
					hosts += ( row['node_name'] + ',')
					prev = False
				elif cluster0 != clusterT and prev == False:
					hosts = ''
					hosts += ( row['node_name'] + ',')
					prev = True
					cluster0 = clusterT
					finLi.append(hosts)
			for y in finLi:
				y = y[:-1]
				y = hostlist.compress_range(y)
				print(y, end=" ")

if __name__ == "__main__":
    main()

